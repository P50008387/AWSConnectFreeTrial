{"version":3,"sources":["../node_modules/@aws-amplify/ui-components/dist/esm-es5 lazy /^/.*/.entry/.js$/ include: /.entry/.js$/ exclude: /.system/.entry/.js$/ groupOptions: {} namespace object","aws-exports.js","components/message.js","components/translate.js","components/translateAPI.js","store/state.js","components/chatroom.js","components/detectText.js","components/ccp.js","App.js","reportWebVitals.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","awsmobile","Message","chat","user","className","username","content","translatedMessage","sourceLang","tagretLang","a","Predictions","convert","translateText","source","text","language","targetLanguage","transcriptMessage","ProcessChatText","targetLang","terminologyNames","myInit","body","headers","console","log","API","post","result","error","ProcessChatTextAPI","createGlobalState","languageTranslate","Chats","currentContactId","languageOptions","setGlobalState","useGlobalState","addChat","contactId","setLanguageTranslate","state","setCurrentContactId","Chatroom","props","useState","newMessage","setNewMessage","agentUsername","messageEl","useRef","input","sendMessage","session","contentType","message","awsSdkResponse","data","AbsoluteTime","Id","event","retrieveValue","key","value","obj","item","preventDefault","destLang","find","translateTextAPI","lang","translatedMessageAPI","TranslatedText","data2","prevMsg","useEffect","current","addEventListener","target","currentTarget","scroll","top","scrollHeight","behavior","focus","object","undefined","getKeyByValue","ref","onSubmit","maxLength","type","onChange","detectLang","interpret","DetectChatText","Amplify","configure","awsconfig","addPluggable","AmazonAIPredictionsProvider","Ccp","localLanguageTranslate","agentChatSessionState","setAgentChatSessionState","setRefreshChild","getEvents","contact","agentChatSession","getAgentConnection","getMediaController","controller","onMessage","messageData","chatDetails","participantId","ParticipantId","DisplayName","Content","processChatText","Type","ContactId","upsert","array","i","findIndex","_item","push","textLang","length","detectText","tempLang","textInterpretation","subscribeConnectEvents","window","connect","core","onViewContact","ChatSession","onConnecting","contactAttributes","getAttributes","JSON","stringify","contactQueue","getQueue","onAccepted","cnn","getConnections","getType","ConnectionType","AGENT","x_lang","err","onConnected","onRefresh","onEnded","onDestroy","agent","onStateChange","agentStateChange","newState","setTimeout","agentApp","initApp","connectUrl","ccpParams","region","pageOptions","enableAudioDeviceSettings","enablePhoneTypeSettings","Grid","columns","stackable","padded","Row","Auth","App","Component","withAuthenticator","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","awsExports","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.753f7350.chunk.js","sourcesContent":["var map = {\n\t\"./amplify-amazon-button_5.entry.js\": [\n\t\t273,\n\t\t16\n\t],\n\t\"./amplify-auth-container.entry.js\": [\n\t\t274,\n\t\t17\n\t],\n\t\"./amplify-auth-fields_9.entry.js\": [\n\t\t275,\n\t\t18\n\t],\n\t\"./amplify-authenticator.entry.js\": [\n\t\t276,\n\t\t5\n\t],\n\t\"./amplify-button_3.entry.js\": [\n\t\t277,\n\t\t19\n\t],\n\t\"./amplify-chatbot.entry.js\": [\n\t\t278,\n\t\t4\n\t],\n\t\"./amplify-checkbox.entry.js\": [\n\t\t279,\n\t\t20\n\t],\n\t\"./amplify-confirm-sign-in_7.entry.js\": [\n\t\t280,\n\t\t6\n\t],\n\t\"./amplify-container.entry.js\": [\n\t\t281,\n\t\t21\n\t],\n\t\"./amplify-federated-buttons_2.entry.js\": [\n\t\t282,\n\t\t22\n\t],\n\t\"./amplify-federated-sign-in.entry.js\": [\n\t\t283,\n\t\t23\n\t],\n\t\"./amplify-form-field_4.entry.js\": [\n\t\t284,\n\t\t24\n\t],\n\t\"./amplify-greetings.entry.js\": [\n\t\t285,\n\t\t25\n\t],\n\t\"./amplify-icon-button.entry.js\": [\n\t\t286,\n\t\t26\n\t],\n\t\"./amplify-icon.entry.js\": [\n\t\t287,\n\t\t7\n\t],\n\t\"./amplify-link.entry.js\": [\n\t\t288,\n\t\t27\n\t],\n\t\"./amplify-nav_2.entry.js\": [\n\t\t289,\n\t\t28\n\t],\n\t\"./amplify-photo-picker.entry.js\": [\n\t\t290,\n\t\t29\n\t],\n\t\"./amplify-picker.entry.js\": [\n\t\t291,\n\t\t30\n\t],\n\t\"./amplify-radio-button_3.entry.js\": [\n\t\t292,\n\t\t8\n\t],\n\t\"./amplify-s3-album.entry.js\": [\n\t\t293,\n\t\t9\n\t],\n\t\"./amplify-s3-image-picker.entry.js\": [\n\t\t294,\n\t\t10\n\t],\n\t\"./amplify-s3-image.entry.js\": [\n\t\t295,\n\t\t11\n\t],\n\t\"./amplify-s3-text-picker.entry.js\": [\n\t\t296,\n\t\t12\n\t],\n\t\"./amplify-s3-text.entry.js\": [\n\t\t297,\n\t\t13\n\t],\n\t\"./amplify-select-mfa-type.entry.js\": [\n\t\t298,\n\t\t31\n\t],\n\t\"./amplify-sign-in-button.entry.js\": [\n\t\t299,\n\t\t14\n\t],\n\t\"./amplify-tooltip.entry.js\": [\n\t\t300,\n\t\t32\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 251;\nmodule.exports = webpackAsyncContext;","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-1\",\n    \"aws_cognito_identity_pool_id\": \"us-east-1:516fb6b4-afd5-4531-8bf2-a6935d970197\",\n    \"aws_cognito_region\": \"us-east-1\",\n    \"aws_user_pools_id\": \"us-east-1_0rOcwH7Ua\",\n    \"aws_user_pools_web_client_id\": \"231l46ihggg971f9mc99uqcrv0\",\n    \"oauth\": {},\n    \"aws_cloud_logic_custom\": [\n        {\n            \"name\": \"amazonTranslateAPI\",\n            \"endpoint\": \"https://mqbog9r05i.execute-api.us-east-1.amazonaws.com/dev\",\n            \"region\": \"us-east-1\"\n        }\n    ],\n    \"aws_appsync_graphqlEndpoint\": \"https://k45utokmqrcu5b5rgbatvsx7ne.appsync-api.us-east-1.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-1\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-in5rzn5wijekfcwt6cyc3e5bte\",\n    \"predictions\": {\n        \"convert\": {\n            \"translateText\": {\n                \"region\": \"us-east-1\",\n                \"proxy\": false,\n                \"defaults\": {\n                    \"sourceLanguage\": \"en\",\n                    \"targetLanguage\": \"de\"\n                }\n            }\n        },\n        \"interpret\": {\n            \"interpretText\": {\n                \"region\": \"us-east-1\",\n                \"proxy\": false,\n                \"defaults\": {\n                    \"type\": \"ALL\"\n                }\n            }\n        }\n    }\n};\n\n\nexport default awsmobile;\n","import React from 'react';\n\n// This function creates the HTML to add the chats to the store, controlling the layout\nconst Message = ({ chat, user }) => (\n    <li className={`chat ${user === chat.username ? \"right\" : \"left\"}`}>\n        {chat.content}\n        <li className=\"translatedMessage\">{chat.translatedMessage}</li>\n    </li>\n);\n\nexport default Message;\n\n","import Predictions, { AmazonAIPredictionsProvider } from '@aws-amplify/predictions';\n\n\nasync function ProcessChatText(content, sourceLang, tagretLang) {\n\n    let transcriptMessage = await Predictions.convert({\n        translateText: {\n            source: {\n                text: content,\n                language: sourceLang, // defaults configured on aws-exports.js\n                // supported languages https://docs.aws.amazon.com/translate/latest/dg/how-it-works.html#how-it-works-language-codes\n            },\n            targetLanguage: tagretLang\n        }\n    });\n    return transcriptMessage.text\n}\nexport default ProcessChatText\n","import { API } from 'aws-amplify';\n\nasync function ProcessChatTextAPI(content, sourceLang, targetLang, terminologyNames) {\n    const apiName = 'amazonTranslateAPI';\n    const path = '/translate';\n    const myInit = { // OPTIONAL\n        body: { 'content': content, 'sourceLang': sourceLang, 'targetLang': targetLang, 'terminologyNames': terminologyNames },\n        headers: {}, // OPTIONAL\n    };\n    console.log(\"myInit :\", myInit);\n\n    try {\n        var result = await API.post(apiName, path, myInit);\n        console.log(\"ProcessChatTextAPI: \", result);\n        return result;\n    }\n    catch (error) {\n        console.error(\"ProcessChatTextAPI: \", error);\n        return error;\n    }\n}\nexport default ProcessChatTextAPI\n","import { createGlobalState } from \"react-hooks-global-state\";\n\n\nconst { setGlobalState, useGlobalState } = createGlobalState({\n    languageTranslate: [],\n    Chats: [],\n    currentContactId: 'none',\n    languageOptions: {\n        'Afrikaans':'af',\n        'Albanian':'sq',\n        'Amharic':'am',\n        'Arabic':'ar',\n        'Armenian':'hy',\n        'Azerbaijani':'az',\n        'Bengali':'bn',\n        'Bosnian':'bs',\n        'Bulgarian':'bg',\n        'Catalan':'ca',\n        'Chinese (Simplified)':'zh',\n        'Chinese (Traditional)':'zh-TW',\n        'Croatian':'hr',\n        'Czech':'cs',\n        'Danish':'da',\n        'Dari':'fa-AF',\n        'Dutch':'nl',\n        'English':'en',\n        'Estonian':'et',\n        'Farsi (Persian)':'fa',\n        'Filipino Tagalog':'tl',\n        'Finnish':'fi',\n        'French':'fr',\n        'French (Canada)':'fr-CA',\n        'Georgian':'ka',\n        'German':'de',\n        'Greek':'el',\n        'Gujarati':'gu',\n        'Haitian Creole':'ht',\n        'Hausa':'ha',\n        'Hebrew':'he',\n        'Hindi':'hi',\n        'Hungarian':'hu',\n        'Icelandic':'is',\n        'Indonesian':'id',\n        'Italian':'it',\n        'Japanese':'ja',\n        'Kannada':'kn',\n        'Kazakh':'kk',\n        'Korean':'ko',\n        'Latvian':'lv',\n        'Lithuanian':'lt',\n        'Macedonian':'mk',\n        'Malay':'ms',\n        'Malayalam':'ml',\n        'Maltese':'mt',\n        'Mongolian':'mn',\n        'Norwegian':'no',\n        'Persian':'fa',\n        'Pashto':'ps',\n        'Polish':'pl',\n        'Portuguese':'pt',\n        'Romanian':'ro',\n        'Russian':'ru',\n        'Serbian':'sr',\n        'Sinhala':'si',\n        'Slovak':'sk',\n        'Slovenian':'sl',\n        'Somali':'so',\n        'Spanish':'es',\n        'Spanish (Mexico)':'es-MX',\n        'Swahili':'sw',\n        'Swedish':'sv',\n        'Tagalog':'tl',\n        'Tamil':'ta',\n        'Telugu':'te',\n        'Thai':'th',\n        'Turkish':'tr',\n        'Ukrainian':'uk',\n        'Urdu':'ur',\n        'Uzbek':'uz',\n        'Vietnamese':'vi',\n        'Welsh':'cy'\n    },\n});\n\nexport const addChat = (Chats, contactId) => {\n    setGlobalState(\"Chats\", Chats);\n};\n\nexport const clearChat = () => {\n    setGlobalState(\"Chats\", []);\n};\n\n\nexport const setLanguageTranslate = (state) => {\n        setGlobalState(\"languageTranslate\", state);\n};\n\nexport const setCurrentContactId = (contactId) => {\n    setGlobalState(\"currentContactId\", contactId);\n};\n\nexport { useGlobalState };\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport './chatroom.css';\r\nimport Message from './message.js';\r\nimport translateText from './translate'\r\nimport translateTextAPI from './translateAPI'\r\nimport { addChat, useGlobalState } from '../store/state';\r\n\r\n\r\nconst Chatroom = (props) => {\r\n\r\n    const [Chats] = useGlobalState('Chats');\r\n    const currentContactId = useGlobalState('currentContactId');\r\n    const [newMessage, setNewMessage] = useState(\"\");\r\n    const [languageTranslate] = useGlobalState('languageTranslate');\r\n    const [languageOptions] = useGlobalState('languageOptions');\r\n    const agentUsername = \"AGENT\";\r\n    const messageEl = useRef(null);\r\n    const input = useRef(null);\r\n\r\n\r\n    function getKeyByValue(object) {\r\n        let obj = languageTranslate.find(o => o.contactId === currentContactId[0]);\r\n        if(obj === undefined) {\r\n            return\r\n          } else {\r\n                return Object.keys(object).find(key => object[key] === obj.lang);\r\n        }\r\n        \r\n    }\r\n    const sendMessage = async (session, content) => {\r\n        try {\r\n            const awsSdkResponse = await session.sendMessage({\r\n                contentType: \"text/plain\",\r\n                message: content\r\n            });\r\n            const { AbsoluteTime, Id } = awsSdkResponse.data;\r\n        }\r\n        catch {\r\n            \r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        // this ensures that the chat window will auto scoll to ensure the more recent message is in view\r\n        if (messageEl) {\r\n            messageEl.current.addEventListener('DOMNodeInserted', event => {\r\n                const { currentTarget: target } = event;\r\n                target.scroll({ top: target.scrollHeight, behavior: 'smooth' });\r\n            });\r\n        }\r\n        // this ensure that the input box has the focus on load and after each entry\r\n        input.current.focus();\r\n    }, []);\r\n\r\n\r\n    async function handleSubmit(event) {\r\n        \r\n        event.preventDefault();\r\n        // if there is no text in the the chat input box, do nothing.\r\n        if (newMessage === \"\") {\r\n            return;\r\n        }\r\n        let destLang = languageTranslate.find(o => o.contactId === currentContactId[0]);\r\n\r\n        // translate the agent message  ** Swap the below two round if you wnat to test custom termonologies **\r\n        // let translatedMessage = await translateText(newMessage, 'en', destLang.lang);\r\n\r\n        /***********************************CUSTOM TERMINOLOGY*************************************************    \r\n         \r\n            To support custom terminologies comment out the line above, and uncomment the below 2 lines \r\n         \r\n         ******************************************************************************************************/\r\n\r\n        let translatedMessageAPI \r\n        let translatedMessage\r\n\r\n        try {\r\n            translatedMessageAPI = await translateTextAPI(newMessage, 'en', destLang.lang, ['connectChatTranslate']); // Provide a custom terminology created outside of this deployment\r\n            translatedMessage = translatedMessageAPI.TranslatedText\r\n        }\r\n        catch {\r\n            // checking how to send message in english \r\n            translatedMessage = newMessage\r\n        }\r\n\r\n        \r\n\r\n\r\n        console.log(` Original Message: ` + newMessage + `\\n Translated Message: ` + translatedMessage);\r\n        // create the new message to add to Chats.\r\n        let data2 = {\r\n            contactId: currentContactId[0],\r\n            username: agentUsername,\r\n            content: <p>{newMessage}</p>,\r\n            translatedMessage: <p>{translatedMessage}</p>, // set to {translatedMessage.TranslatedText} if using custom terminologies\r\n        };\r\n        // add the new message to the store\r\n        addChat(prevMsg => [...prevMsg, data2]);\r\n        // clear the chat input box\r\n        setNewMessage(\"\");\r\n\r\n\r\n        debugger;\r\n        const session = retrieveValue(currentContactId[0]);\r\n\r\n        function retrieveValue(key){\r\n            var value = \"\";\r\n            for(var obj in props.session) {\r\n            for(var item in props.session[obj]) {\r\n                if(item === key) {\r\n                    value = props.session[obj][item];\r\n                    break;\r\n                }\r\n            }\r\n            }\r\n            return value;\r\n        }\r\n        sendMessage(session, translatedMessage);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"chatroom\">\r\n            \r\n                <h3>Translate - ({languageTranslate.map(lang => {if(lang.contactId === currentContactId[0])return lang.lang})}) {getKeyByValue(languageOptions)}</h3>\r\n                <ul className=\"chats\" ref={messageEl}>\r\n                {\r\n                        // iterate over the Chats, and only display the messages for the currently active chat session\r\n                        Chats.map(chat => {\r\n                            if(chat.contactId === currentContactId[0])\r\n                                return<Message chat={chat} user={agentUsername} />\r\n                            }\r\n                        )\r\n                    }\r\n                </ul>\r\n                <form className=\"input\" onSubmit={handleSubmit} >\r\n                    <input\r\n                          ref={input}\r\n                          maxLength = \"1024\"\r\n                          type=\"text\"\r\n                          value={newMessage}\r\n                          onChange={e => setNewMessage(e.target.value)}\r\n                        />\r\n                    <input type=\"submit\" value=\"Submit\" />\r\n                </form>\r\n \r\n            </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Chatroom;","import Predictions from '@aws-amplify/predictions';\n\nasync function DetectChatText(content) {\n\n    let detectLang = Predictions.interpret({\n        text: {\n            source: {\n                text: content,\n            },\n            type: \"ALL\"\n        }\n    })\n    return detectLang\n}\n\nexport default DetectChatText\n","import React, { useEffect, useState } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport Amplify from 'aws-amplify';\nimport Predictions, { AmazonAIPredictionsProvider } from '@aws-amplify/predictions';\nimport awsconfig from '../aws-exports';\nimport Chatroom from './chatroom';\nimport translateText from './translate'\nimport detectText from './detectText'\nimport { addChat, setLanguageTranslate, clearChat, useGlobalState, setCurrentContactId } from '../store/state';\n\nAmplify.configure(awsconfig);\nAmplify.addPluggable(new AmazonAIPredictionsProvider());\n\n\n\n\nconst Ccp = () => {\n    const [languageTranslate] = useGlobalState('languageTranslate');\n    var localLanguageTranslate = [];\n    const [Chats] = useGlobalState('Chats');\n    const [lang, setLang] = useState(\"\");\n    const [currentContactId] = useGlobalState('currentContactId');\n    const [languageOptions] = useGlobalState('languageOptions');\n    const [agentChatSessionState, setAgentChatSessionState] = useState([]);\n    const [setRefreshChild] = useState([]);\n\n    \n\n    // *******\n    // Subscribe to the chat session\n    // *******\n    function getEvents(contact, agentChatSession) {\n        contact.getAgentConnection().getMediaController().then(controller => {\n            controller.onMessage(messageData => {\n                if (messageData.chatDetails.participantId === messageData.data.ParticipantId) {\n                    console.log(`CDEBUG ===> Agent ${messageData.data.DisplayName} Says`,\n                        messageData.data.Content)\n                }\n                else {\n                    console.log(`CDEBUG ===> Customer ${messageData.data.DisplayName} Says`,messageData.data.Content);\n                    processChatText(messageData.data.Content, messageData.data.Type, messageData.data.ContactId );\n                }\n            })\n        })\n    }\n    // *******\n    // Processing the incoming chat from the Customer\n    // *******\n    async function processChatText(content, type, contactId) {\n        // Check if we know the language for this contactId, if not use dectectText(). This process means we only perform comprehend language detection at most once.\n        let textLang = '';\n          for(var i = 0; i < languageTranslate.length; i++) {\n                if (languageTranslate[i].contactId == contactId) {\n                    textLang = languageTranslate[i].lang\n                     break\n                } \n        }\n        // If the contatId was not found in the store, or the store is empty, perform dectText API to comprehend\n        if (localLanguageTranslate.length == 0 || textLang == ''){\n            let tempLang = await detectText(content);\n            textLang = tempLang.textInterpretation.language\n        }\n\n\n         // Update (or Add if new contactId) the store with the the language code\n         function upsert(array, item) { // (1)\n            const i = array.findIndex(_item => _item.contactId === item.contactId);\n            if (i > -1) array[i] = item; // (2)\n            else array.push(item);\n          }\n        upsert(languageTranslate, {contactId: contactId, lang: textLang})\n        setLanguageTranslate(languageTranslate);\n                \n        // Translate the customer message into English.\n        let translatedMessage = await translateText(content, textLang, 'en');\n        console.log(`CDEBUG ===>  Original Message: ` + content + `\\n Translated Message: ` + translatedMessage);\n        // create the new message to add to Chats.\n        let data2 = {\n            contactId: contactId,\n            username: 'customer',\n            content: <p>{content}</p>,\n            translatedMessage: <p>{translatedMessage}</p>\n        };\n        // Add the new message to the store\n        addChat(prevMsg => [...prevMsg, data2]);\n    }\n\n    // *******\n    // Subscribing to CCP events. See : https://github.com/aws/amazon-connect-streams/blob/master/Documentation.md\n    // *******\n    function subscribeConnectEvents() {\n        window.connect.core.onViewContact(function(event) {\n            var contactId = event.contactId;\n            console.log(\"CDEBUG ===> onViewContact\", contactId)\n            setCurrentContactId(contactId);    \n          });\n\n        console.log(\"CDEBUG ===> subscribeConnectEvents\");\n\n        // If this is a chat session\n        if (window.connect.ChatSession) {\n            console.log(\"CDEBUG ===> Subscribing to Connect Contact Events for chats\");\n            window.connect.contact(contact => {\n\n                // This is invoked when CCP is ringing\n                contact.onConnecting(() => {\n                    console.log(\"CDEBUG ===> onConnecting() >> contactId: \", contact.contactId);\n                    let contactAttributes = contact.getAttributes();\n                    console.log(\"CDEBUG ===> contactAttributes: \", JSON.stringify(contactAttributes));\n                    let contactQueue = contact.getQueue();\n                    console.log(\"CDEBUG ===> contactQueue: \", contactQueue);\n                });\n\n                // This is invoked when the chat is accepted\n                contact.onAccepted(async() => {\n                    console.log(\"CDEBUG ===> onAccepted: \", contact);\n                    const cnn = contact.getConnections().find(cnn => cnn.getType() === window.connect.ConnectionType.AGENT);\n                    const agentChatSession = await cnn.getMediaController();\n                    setCurrentContactId(contact.contactId)\n                    console.log(\"CDEBUG ===> agentChatSession \", agentChatSession)\n                    // Save the session to props, this is required to send messages within the chatroom.js\n          \n\n                    // Get the language from the attributes, if the value is valid then add to the store\n                    try {\n                        setAgentChatSessionState(agentChatSessionState => [...agentChatSessionState, { [contact.contactId]: agentChatSession }])\n                        localLanguageTranslate = contact.getAttributes().x_lang.value\n                    }\n                    catch (err) {\n                        console.log(\"\")\n                    }\n\n                    // Get the language from the attributes, if the value is valid then add to the store\n                    \n                    if (Object.keys(languageOptions).find(key => languageOptions[key] === localLanguageTranslate) !== undefined){\n                        console.log(\"CDEBUG ===> Setting lang code from attribites:\", localLanguageTranslate)\n                        languageTranslate.push({contactId: contact.contactId, lang: localLanguageTranslate})\n                        setLanguageTranslate(languageTranslate);\n                        setRefreshChild('updated') // Workaround to force a refresh of the chatroom UI to show the updated language based on contact attribute.\n                \n                    }\n                    console.log(\"CDEBUG ===> onAccepted, languageTranslate \", languageTranslate)\n                    \n                });\n\n                // This is invoked when the customer and agent are connected\n                contact.onConnected(async() => {\n                    console.log(\"CDEBUG ===> onConnected() >> contactId: \", contact.contactId);\n                    const cnn = contact.getConnections().find(cnn => cnn.getType() === window.connect.ConnectionType.AGENT);\n                    const agentChatSession = await cnn.getMediaController();\n                    getEvents(contact, agentChatSession);\n                });\n\n                // This is invoked when new agent data is available\n                contact.onRefresh(() => {\n                    console.log(\"CDEBUG ===> onRefresh() >> contactId: \", contact.contactId);\n                });\n\n                // This is invoked when the agent moves to ACW\n                contact.onEnded(() => {\n                    console.log(\"CDEBUG ===> onEnded() >> contactId: \", contact.contactId);\n                });\n                \n                // This is invoked when the agent moves out of ACW to a different state\n                contact.onDestroy(() => {\n                    console.log(\"CDEBUG ===> onDestroy() >> contactId: \", contact.contactId);\n                    // TODO need to remove the previous chats from the store\n                    //clearChat()\n                    setCurrentContactId('')\n                });\n            });\n\n            /* \n            **** Subscribe to the agent API **** \n            See : https://github.com/aws/amazon-connect-streams/blob/master/Documentation.md\n            */\n\n            console.log(\"CDEBUG ===> Subscribing to Connect Agent Events\");\n            window.connect.agent((agent) => {\n                agent.onStateChange((agentStateChange) => {\n                    // On agent state change, update the React state.\n                    let state = agentStateChange.newState;\n                    console.log(\"CDEBUG ===> New State: \", state);\n\n                });\n\n            });\n        }\n        else {\n            console.log(\"CDEBUG ===> waiting 3s\");\n            setTimeout(function() { subscribeConnectEvents(); }, 3000);\n        }\n    };\n\n\n    // ***** \n    // Loading CCP\n    // *****\n    useEffect(() => {\n       // const connectUrl = process.env.REACT_APP_CONNECT_INSTANCE_URL;\n        const connectUrl = \"https://capitachat.my.connect.aws\";\n        window.connect.agentApp.initApp(\n            \"ccp\",\n            \"ccp-container\",\n            connectUrl + \"/connect/ccp-v2/\", { \n                ccpParams: { \n                    //region: process.env.REACT_APP_CONNECT_REGION,\n                    region: \"us-east-1\",\n                    pageOptions: {                  // optional\n                        enableAudioDeviceSettings: true, // optional, defaults to 'false'\n                        enablePhoneTypeSettings: true // optional, defaults to 'true'\n                      }\n                } \n            }\n        );\n        subscribeConnectEvents();\n    }, []);\n\n\n    return (\n        <main>\n          <Grid columns='equal' stackable padded>\n          <Grid.Row>\n            {/* CCP window will load here */}\n            <div id=\"ccp-container\"></div>\n            {/* Translate window will laod here. We pass the agent state to be able to use this to push messages to CCP */}\n            <div id=\"chatroom\" ><Chatroom session={agentChatSessionState}/> </div> \n            </Grid.Row>\n          </Grid>\n        </main>\n    );\n};\n\nexport default Ccp;\n","import React, { Component } from \"react\";\nimport Auth from \"@aws-amplify/auth\";\nimport { AmplifySignOut, withAuthenticator } from '@aws-amplify/ui-react';\nimport awsconfig from \"./aws-exports\";\n\nimport \"./App.css\";\nimport 'semantic-ui-less/semantic.less';\n\n// Import components\nimport Ccp from \"./components/ccp\";\n\nAuth.configure(awsconfig);\n\nclass App extends Component {\n       render() {\n              return (\n                     <div className=\"App\">\n                        <Ccp />\n                     </div>\n              );\n       }\n}\n\nexport default withAuthenticator(App)\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"amazon-connect-streams\"; // This will make the `connect` available in the current context.\nimport \"amazon-connect-chatjs\";\n\n// Import semantic\nimport 'semantic-ui-less/semantic.less';\n\n// Amplify imports for base install\nimport Amplify from \"aws-amplify\";\nimport awsExports from \"./aws-exports\";\nAmplify.configure(awsExports);\n// \n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}